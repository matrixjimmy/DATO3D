buildscript {
    repositories {
        jcenter()
        mavenLocal()
    }

    dependencies {
        classpath 'org.codehaus.griffon:gradle-griffon-plugin:2.8.0'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.6.3'
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0'
        classpath 'org.gradle.api.plugins:gradle-izpack-plugin:0.2.3'
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
        classpath 'com.github.cr0:gradle-macappbundle-plugin:3.1.0'
        classpath 'org.kordamp.gradle:stats-gradle-plugin:0.2.0'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.13.0'
        classpath 'de.gliderpilot.gradle.jnlp:gradle-jnlp-plugin:0.2.1'
        classpath 'net.nemerosa:versioning:2.4.0'
    }
}

apply plugin: 'groovy'
apply plugin: 'org.codehaus.griffon.griffon'
apply plugin: 'net.nemerosa.versioning'

Date buildTimeAndDate = new Date()
ext {
    buildDate = new SimpleDateFormat('yyyy-MM-dd').format(buildTimeAndDate)
    buildTime = new SimpleDateFormat('HH:mm:ss.SSSZ').format(buildTimeAndDate)
    macosx = System.getProperty('os.name').contains('Mac OS')
}

griffon {
    disableDependencyResolution = false
    includeGroovyDependencies = false
    version = '2.8.0'
    toolkit = 'javafx'
    applicationProperties = [
        'build.date'    : buildDate,
        'build.time'    : buildTime,
        'build.revision': versioning.info.commit
    ]
}

mainClassName = 'com.anhe3d.Launcher'

apply from: 'gradle/publishing.gradle'
apply from: 'gradle/code-coverage.gradle'
apply from: 'gradle/code-quality.gradle'
apply from: 'gradle/javafx-plugin.gradle'
apply from: 'gradle/integration-test.gradle'
apply from: 'gradle/functional-test.gradle'
apply from: 'gradle/package.gradle'
apply from: 'gradle/docs.gradle'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'org.kordamp.gradle.stats'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'com.github.kt3k.coveralls'

javafx {
    mainClass = mainClassName
}

dependencies {
    compile "org.codehaus.griffon:griffon-guice:${griffon.version}"

    /* COMM LIBs */
    compile "org.scream3r:jssc:2.8.0"
    /* COMM LIBs END */

    /* COMMONS LIBs */
    compileOnly "org.projectlombok:lombok:1.16.10"
    compile "commons-beanutils:commons-beanutils:1.9.3"
    compile "commons-io:commons-io:2.5"
    compile "org.apache.commons:commons-lang3:3.5"
    compile "org.apache.commons:commons-math3:3.6.1"
    /* COMMONS LIBs END */

    /* SLICING LIBs */
    compile "org.apache.xmlgraphics:fop:2.1"
    compile "org.apache.xmlgraphics:xmlgraphics-commons:2.0.1"
    compile "org.apache.xmlgraphics:batik-util:1.8"
    compile "org.apache.xmlgraphics:batik-awt-util:1.8"
    compile "org.apache.xmlgraphics:batik-xml:1.8"
    compile "org.apache.xmlgraphics:batik-dom:1.8"
    compile "org.apache.xmlgraphics:batik-css:1.8"
    compile "org.apache.xmlgraphics:batik-svg-dom:1.8"
    compile "org.apache.xmlgraphics:batik-gvt:1.8"
    compile "org.apache.xmlgraphics:batik-gui-util:1.8"
    compile "org.apache.xmlgraphics:batik-bridge:1.8"
    compile "org.apache.xmlgraphics:batik-parser:1.8"
    compile "org.apache.xmlgraphics:batik-script:1.8"
    compile "org.apache.xmlgraphics:batik-transcoder:1.8"
    compile "org.apache.xmlgraphics:batik-svggen:1.8"
    compile "org.apache.xmlgraphics:batik-swing:1.8"
    compile "org.apache.xmlgraphics:batik-rasterizer:1.8"
    compile "org.apache.xmlgraphics:batik-ttf2svg:1.8"
    compile "org.apache.xmlgraphics:batik-svgpp:1.8"
    compile "org.apache.xmlgraphics:batik-codec:1.8"
    compile "xerces:xercesImpl:2.11.0"
    compile "xml-apis:xmlParserAPIs:2.0.2"
    compile "xml-apis:xml-apis:1.0.b2"
    compile "org.axsl.org.w3c.dom.svg:svg-dom-java:1.1"
    compile "org.w3c.css:sac:1.3"
    compile "org.apache.pdfbox:pdfbox:2.0.3"
    /* SLICING LIBs END */

    griffon 'org.codehaus.griffon.plugins:griffon-preferences-plugin:1.3.0' // griffon-preferences-plugin

    runtime 'org.slf4j:slf4j-simple:1.7.21'

    testCompile "org.codehaus.griffon:griffon-javafx-test:${griffon.version}"
    testCompile "org.codehaus.groovy:groovy-all:${groovyVersion}"
    testCompile "org.spockframework:spock-core:${spockVersion}"

    functionalTestCompile "org.codehaus.griffon:griffon-javafx-test:${griffon.version}"
}

task sourceJar(type: Jar) {
    group 'Build'
    description 'An archive of the source code'
    classifier 'sources'
    from sourceSets.main.allSource
}

compileGroovy.enabled = false

tasks.withType(JavaCompile) {
    sourceCompatibility = project.sourceCompatibility
    targetCompatibility = project.targetCompatibility
}

tasks.withType(GroovyCompile) {
    sourceCompatibility = project.sourceCompatibility
    targetCompatibility = project.targetCompatibility
}

import com.github.jengelman.gradle.plugins.shadow.transformers.*
import java.text.SimpleDateFormat

shadowJar {
    transform(ServiceFileTransformer)
    transform(ServiceFileTransformer) {
        path = 'META-INF/griffon'
    }
    transform(ServiceFileTransformer) {
        path = 'META-INF/types'
    }
    transform(PropertiesFileTransformer) {
        paths = [
            'META-INF/editors/java.beans.PropertyEditor'
        ]
    }
}

startScripts {
    doLast {
        if (!macosx) unixScript.text = unixScript.text.replaceAll('"(-Xdock:(name|icon)=)([^"]*?)(")', ' ')
        windowsScript.text = windowsScript.text.replaceAll('"(-Xdock:(name|icon)=)([^"]*?)(")', ' ')
    }
}

if (hasProperty('debugRun') && ((project.debugRun as boolean))) {
    run {
        jvmArgs '-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005'
    }
}

task jacocoRootMerge(type: org.gradle.testing.jacoco.tasks.JacocoMerge, dependsOn: [test, jacocoTestReport, jacocoIntegrationTestReport, jacocoFunctionalTestReport]) {
    executionData = files(jacocoTestReport.executionData, jacocoIntegrationTestReport.executionData, jacocoFunctionalTestReport.executionData)
    destinationFile = file("${buildDir}/jacoco/root.exec")
}

task jacocoRootReport(dependsOn: jacocoRootMerge, type: JacocoReport) {
    group = 'Reporting'
    description = 'Generate Jacoco coverage reports after running all tests.'
    executionData file("${buildDir}/jacoco/root.exec")
    sourceDirectories = files(sourceSets.main.allSource.srcDirs)
    classDirectories = files(sourceSets.main.output)
    reports {
        csv.enabled = false
        xml.enabled = true
        html.enabled = true
        html.destination = "${buildDir}/reports/jacoco/root/html"
        xml.destination = "${buildDir}/reports/jacoco/root/root.xml"
    }
}
