package com.anhe3d.util;

import org.apache.batik.apps.rasterizer.DestinationType;
import org.apache.batik.apps.rasterizer.SVGConverter;
import org.apache.batik.apps.rasterizer.SVGConverterException;
import org.apache.batik.dom.GenericDOMImplementation;
import org.apache.batik.svggen.SVGGeneratorContext;
import org.apache.batik.svggen.SVGGraphics2D;
import org.apache.commons.io.FileUtils;
import org.apache.fop.apps.FopFactory;
import org.apache.pdfbox.multipdf.PDFMergerUtility;
import org.w3c.dom.DOMImplementation;
import org.w3c.dom.Document;
import org.xml.sax.SAXException;

import java.awt.*;
import java.awt.color.ColorSpace;
import java.awt.color.ICC_ColorSpace;
import java.awt.color.ICC_Profile;
import java.awt.geom.Ellipse2D;
import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.stream.Collectors;

/**
 * Created by kevinhung on 9/12/16.
 * <p>
 * Simulate the slicing process of slicing general pills
 * How to use it:
 * 1. init the PillShapeGenerator
 * 2. call inputPillSpec for your personal demand
 * 3. call generatePills for the result of svg and pdf
 */
public class PillShapeGenerator {

    // Create an instance of org.w3c.dom.Document.
    String svgNS = "http://www.w3.org/2000/svg";

    // Get a DOMImplementation.
    DOMImplementation domImpl;
    Document document;

    // Create an instance of the SVG Generator.
    SVGGeneratorContext ctx;
    SVGGraphics2D svgGenerator;
    SVGConverter converter;
    FopFactory fopFactory;
    boolean useCSS = true; // we want to use CSS style attributes

    // ICC file config
    final static String strPathCMYKProfile = "src/main/resources/icc-files/JapanWebCoated.icc";
    ColorSpace instance;

    // Pill spec parameter
    double diameter;
    double thickness;
    double maxHeight = 50;
    double spacingXY = 4;
    double spacingZ = 1;
    double adjustedRate = 1.023;

    public PillShapeGenerator() throws IOException, SAXException {
        domImpl = GenericDOMImplementation.getDOMImplementation();
        document = domImpl.createDocument(svgNS, "svg", null);
//        int width = 50; //210
//        int height = 50; //297
        int width = 210; //210
        int height = 297; //297


        ctx = SVGGeneratorContext.createDefault(document);
        ctx.setComment("Generated by Application with Batik SVG Generator");
        svgGenerator = new SVGGraphics2D(ctx, false);
        svgGenerator.setSVGCanvasSize(new Dimension(width, height)); // this contains no unit...


        converter = new SVGConverter();
        converter.setDestinationType(DestinationType.PDF);
        converter.setWidth(width);
        converter.setHeight(height);

        fopFactory = FopFactory.newInstance(FileUtils.getFile("src/main/resources/fop-conf.xml"));
        instance = new ICC_ColorSpace(ICC_Profile.getInstance(strPathCMYKProfile));
    }

    /**
     * Preprocess the pill specification for the maximum number of pill in the tank
     *
     * @param diameter  the diameter of the pill
     * @param thickness the thickness of the pill
     * @param spacingXY the space within x-axis and y-axis between pills
     * @param spacingZ  the space within two pills along with z-axis
     * @return the array of maximum number of pill for three dimension
     */
    public ArrayList<Integer> inputPillSpec(double diameter, double thickness, double spacingXY, double spacingZ) throws IOException {
        this.diameter = diameter * (this.adjustedRate);
        this.thickness = thickness;
        this.spacingXY = spacingXY;
        this.spacingZ = spacingZ;

        System.out.println("***InputSpecs***");
        System.out.println(this.spacingXY);
        System.out.println(this.spacingZ);
        System.out.println(this.diameter);
        System.out.println(this.thickness);
        System.out.println("***InputSpecs***");


        ArrayList result = new ArrayList<Integer>();
        int xNumber = (int) ((210) / (this.diameter + spacingXY));
        int yNumber = (int) ((297) / (this.diameter + spacingXY));
        int zNumber = (int) (maxHeight / (thickness + spacingZ));

        System.out.println(xNumber);
        System.out.println(yNumber);
        System.out.println(zNumber);

        result.add(xNumber);
        result.add(yNumber);
        result.add(zNumber);

        return result;
    }

    /**
     * Generate the svg and pdf file for given parameters
     *
     * @param outputPath     the path for storing the result
     * @param xCount         number of pills along with x-axis
     * @param yCount         number of pills along with y-axis
     * @param zCount         number of pills along with z-axis
     * @param layerThinkness thickness of each layer for the 3D printer
     * @param pillSpecs      result from inputPillSpec
     */
    public void generatePills(String outputPath, int xCount, int yCount, int zCount, double layerThinkness, ArrayList<Integer> pillSpecs) throws IOException {

//        float alpha = (float) 1;
//
//
//        for (int i = 25; i < 225; i+=8) {
//            Rectangle rectangleC = new Rectangle(0, i, 25, 8);
//            float[] cmyk1 = {(float) (i-25)/200, 0, 0, 0};
//            Color color1 = new Color(instance, cmyk1, alpha);
//            svgGenerator.setPaint(color1);
//            svgGenerator.fill(rectangleC);
//
//
//        }

//        svgGenerator.setPaint(Color.red);
//
//        Rectangle rectangleA = new Rectangle(0, 0, 210, 210);
//        Rectangle rectangleB = new Rectangle(0, 0, 105, 297);
//        Rectangle.Double rectangleC = new Rectangle.Double(0, 0, 210, 148.5);
//        svgGenerator.draw(rectangleA);
//        svgGenerator.draw(rectangleB);
//        svgGenerator.draw(rectangleC);


        if (xCount > pillSpecs.get(0) || yCount > pillSpecs.get(1) || zCount > pillSpecs.get(2) ||
                xCount <= 0 || yCount <= 0 || zCount <= 0) {
            System.out.println("Your input is out of printing range!!!");
        } else {

            for (int h = 0; h < zCount; h++) {
                int k = 0;
                for (k = 0; k < (int) this.thickness / layerThinkness; k++) {
                    for (int i = 0; i < yCount; i++) {
                        for (int j = 0; j < xCount; j++) {
                            Ellipse2D.Double circle = new Ellipse2D.Double(j * (diameter + this.spacingXY), i * (diameter + this.spacingXY), diameter, diameter);
                            svgGenerator.setPaint(Color.green);
                            svgGenerator.fill(circle);
                        }
                    }
                    Path output = Paths.get(String.format("%s/layer-%03d-" + k + ".svg", outputPath, h));
                    FileOutputStream outputStream = FileUtils.openOutputStream(output.toFile());
                    Writer out = new OutputStreamWriter(outputStream, "UTF-8");
                    svgGenerator.stream(out, useCSS);
//                    System.out.println("Pills");
                }

                int temp = (int) ((int) this.spacingZ / layerThinkness + k);
                for (; k < temp; k++) {
                    Path output = Paths.get(String.format("%s/layer-%03d-" + k + ".svg", outputPath, h));
                    FileOutputStream outputStream = FileUtils.openOutputStream(output.toFile());
                    Writer out = new OutputStreamWriter(outputStream, "UTF-8");
                    svgGenerator.stream(out, useCSS);
//                    System.out.println("Spaces");
                }
            }
        }
    }

    //TODO can not export all files in one
    public void exportPDF(String inputPath, String outputPath) throws SVGConverterException, IOException {
        if (!Files.exists(Paths.get(inputPath))) {
            System.out.println("There is no file exit.");
        } else {
            String[] collect = FileUtils.listFiles(Paths.get(inputPath).toFile(), new String[]{"svg"}, false)
                    .stream()
                    .map(File::getAbsolutePath)
                    .collect(Collectors.toList())
                    .toArray(new String[]{});
            converter.setSources(collect);
            converter.setDst(Paths.get(outputPath).toFile());
            converter.execute();
        }

    }

    public void mergePDF(String inputPath, String outputPath) throws IOException {
        PDFMergerUtility mergePdf = new PDFMergerUtility();
        FileUtils.listFiles(Paths.get(inputPath).toFile(), new String[]{"pdf"}, false)
                .stream()
                .map(File::getAbsolutePath)
                .collect(Collectors.toList())
                .forEach((source) -> {
                    try {
                        mergePdf.addSource(source);
                    } catch (FileNotFoundException ignored) {
                    }
                });
        mergePdf.setDestinationFileName(outputPath);
        mergePdf.mergeDocuments(null);
    }
}